(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";

var Person = require("./model/Person").Person;

global.app = function () {
  var christoph = new Person("Christoph", "Burgdorf");
  console.log(christoph.fullName);
};

function initPageByHash() {
  window.addEventListener("hashchange", changeMainView);
  if (window.location.hash === "") {
    window.location.hash = "#home";
    return;
  }
  changeMainView();
}

function changeMainView() {
  var hash = window.location.hash;
  var main = document.getElementById("main");
  var homeTemplate = "<div>\n<h1>Hire my Services</h1>\n<span class=\"image\"></span>\n<p>The wonderfull mix of knowladge in programming with enthusiasem in learning, makes me a great addition to any team!</p>\n<a href=\"#payment\">hire me!</a>\n</div>";

  var paymentTemplate = "<div><h1>pay here</h1>\n<form>\n<label>\nFirst name:\n<input type=\"text\" required>\n</label>\n<label>\nLast name:\n<input type=\"text\" required>\n</label>\n<label>\nE-mail:\n<input type=\"email\" required>\n</label>\n<label>\nCountry:\n<input type=\"text\"  id=\"autocomplete\" required>\n</label>\n</form>\n</div>";

  if (hash === "#home") {
    // create basic view
    main.innerHTML = homeTemplate;
  }

  if (hash === "#payment") {
    main.innerHTML = paymentTemplate;
    var input = document.getElementById("autocomplete");
    // const autocomplete = new google.maps.places.Autocomplete(input,{types: ['(regions)']});
    // google.maps.event.addListener(autocomplete, 'place_changed', function(){
    //   let place = autocomplete.getPlace();
    // });
    var autocomplete = new google.maps.places.Autocomplete(input, { types: ["(regions)"] });
    var result = autocomplete.getPlace();
    console.log(result); // take a look at this result object
    console.log(result.address_components); // a result has multiple address components

    for (var i = 0; i < result.address_components.length; i += 1) {
      var addressObj = result.address_components[i];
      for (var j = 0; j < addressObj.types.length; j += 1) {
        if (addressObj.types[j] === "country") {
          console.log(addressObj.types[j]); // confirm that this is 'country'
          console.log(addressObj.long_name); // confirm that this is the country name
        }
      }
    }
  }
}
initPageByHash();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL05FWFVTL0Rlc2t0b3Avam9iIHNlYXJjaC9pcm9uIHNvdXJjZS9Jcm9uU291cmNlL0lyb25Tb3VyY2UtLS1lY29tbWVyY2UtL3NyYy9hcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBQVEsTUFBTSxXQUFPLGdCQUFnQixFQUE3QixNQUFNOztBQUVkLE1BQU0sQ0FBQyxHQUFHLEdBQUcsWUFBWTtBQUNyQixNQUFJLFNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDcEQsU0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDbkMsQ0FBQzs7QUFFRixTQUFTLGNBQWMsR0FBRztBQUN4QixRQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQ3RELE1BQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFO0FBQy9CLFVBQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztBQUMvQixXQUFPO0dBQ1I7QUFDRCxnQkFBYyxFQUFFLENBQUM7Q0FDbEI7O0FBRUQsU0FBUyxjQUFjLEdBQUc7QUFDeEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDbEMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QyxNQUFNLFlBQVksMk9BS2IsQ0FBQzs7QUFFTixNQUFNLGVBQWUsa1VBbUJoQixDQUFDOztBQUVOLE1BQUksSUFBSSxLQUFLLE9BQU8sRUFBRTs7QUFFcEIsUUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7R0FDL0I7O0FBRUQsTUFBRyxJQUFJLEtBQUssVUFBVSxFQUFDO0FBQ25CLFFBQUksQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDO0FBQ25DLFFBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7Ozs7O0FBS3ZELFFBQU0sWUFBWSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxFQUFDLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFDLENBQUMsQ0FBQztBQUN2RixRQUFJLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDckMsV0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwQixXQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOztBQUV2QyxTQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQzNELFVBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5QyxXQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUNsRCxZQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQ3JDLGlCQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDbkM7T0FDRjtLQUNGO0dBQ0Y7Q0FDRjtBQUNELGNBQWMsRUFBRSxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BlcnNvbn0gZnJvbSAnLi9tb2RlbC9QZXJzb24nO1xyXG5cclxuZ2xvYmFsLmFwcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBjaHJpc3RvcGggPSBuZXcgUGVyc29uKCdDaHJpc3RvcGgnLCAnQnVyZ2RvcmYnKTtcclxuICAgIGNvbnNvbGUubG9nKGNocmlzdG9waC5mdWxsTmFtZSk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBpbml0UGFnZUJ5SGFzaCgpIHtcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGNoYW5nZU1haW5WaWV3KTtcclxuICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICcnKSB7XHJcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcjaG9tZSc7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNoYW5nZU1haW5WaWV3KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoYW5nZU1haW5WaWV3KCkge1xyXG4gIGNvbnN0IGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxuICBjb25zdCBtYWluID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW4nKTtcclxuICBjb25zdCBob21lVGVtcGxhdGUgPSBgPGRpdj5cclxuPGgxPkhpcmUgbXkgU2VydmljZXM8L2gxPlxyXG48c3BhbiBjbGFzcz1cImltYWdlXCI+PC9zcGFuPlxyXG48cD5UaGUgd29uZGVyZnVsbCBtaXggb2Yga25vd2xhZGdlIGluIHByb2dyYW1taW5nIHdpdGggZW50aHVzaWFzZW0gaW4gbGVhcm5pbmcsIG1ha2VzIG1lIGEgZ3JlYXQgYWRkaXRpb24gdG8gYW55IHRlYW0hPC9wPlxyXG48YSBocmVmPVwiI3BheW1lbnRcIj5oaXJlIG1lITwvYT5cclxuPC9kaXY+YDtcclxuXHJcbiAgY29uc3QgcGF5bWVudFRlbXBsYXRlID0gYDxkaXY+PGgxPnBheSBoZXJlPC9oMT5cclxuPGZvcm0+XHJcbjxsYWJlbD5cclxuRmlyc3QgbmFtZTpcclxuPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVxdWlyZWQ+XHJcbjwvbGFiZWw+XHJcbjxsYWJlbD5cclxuTGFzdCBuYW1lOlxyXG48aW5wdXQgdHlwZT1cInRleHRcIiByZXF1aXJlZD5cclxuPC9sYWJlbD5cclxuPGxhYmVsPlxyXG5FLW1haWw6XHJcbjxpbnB1dCB0eXBlPVwiZW1haWxcIiByZXF1aXJlZD5cclxuPC9sYWJlbD5cclxuPGxhYmVsPlxyXG5Db3VudHJ5OlxyXG48aW5wdXQgdHlwZT1cInRleHRcIiAgaWQ9XCJhdXRvY29tcGxldGVcIiByZXF1aXJlZD5cclxuPC9sYWJlbD5cclxuPC9mb3JtPlxyXG48L2Rpdj5gO1xyXG5cclxuICBpZiAoaGFzaCA9PT0gJyNob21lJykge1xyXG4gICAgLy8gY3JlYXRlIGJhc2ljIHZpZXdcclxuICAgIG1haW4uaW5uZXJIVE1MID0gaG9tZVRlbXBsYXRlO1xyXG4gIH1cclxuXHJcbiAgaWYoaGFzaCA9PT0gJyNwYXltZW50Jyl7XHJcbiAgICAgIG1haW4uaW5uZXJIVE1MID0gcGF5bWVudFRlbXBsYXRlO1xyXG4gICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXV0b2NvbXBsZXRlJyk7XHJcbiAgICAvLyBjb25zdCBhdXRvY29tcGxldGUgPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLkF1dG9jb21wbGV0ZShpbnB1dCx7dHlwZXM6IFsnKHJlZ2lvbnMpJ119KTtcclxuICAgIC8vIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKGF1dG9jb21wbGV0ZSwgJ3BsYWNlX2NoYW5nZWQnLCBmdW5jdGlvbigpe1xyXG4gICAgLy8gICBsZXQgcGxhY2UgPSBhdXRvY29tcGxldGUuZ2V0UGxhY2UoKTtcclxuICAgIC8vIH0pO1xyXG4gICBjb25zdCBhdXRvY29tcGxldGUgPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLkF1dG9jb21wbGV0ZShpbnB1dCwge3R5cGVzOiBbJyhyZWdpb25zKSddfSk7XHJcbiAgICBsZXQgcmVzdWx0ID0gYXV0b2NvbXBsZXRlLmdldFBsYWNlKCk7XHJcbiAgICBjb25zb2xlLmxvZyhyZXN1bHQpOyAvLyB0YWtlIGEgbG9vayBhdCB0aGlzIHJlc3VsdCBvYmplY3RcclxuICAgIGNvbnNvbGUubG9nKHJlc3VsdC5hZGRyZXNzX2NvbXBvbmVudHMpOyAvLyBhIHJlc3VsdCBoYXMgbXVsdGlwbGUgYWRkcmVzcyBjb21wb25lbnRzXHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHJlc3VsdC5hZGRyZXNzX2NvbXBvbmVudHMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgbGV0IGFkZHJlc3NPYmogPSByZXN1bHQuYWRkcmVzc19jb21wb25lbnRzW2ldO1xyXG4gICAgICBmb3IobGV0IGogPSAwOyBqIDwgYWRkcmVzc09iai50eXBlcy5sZW5ndGg7IGogKz0gMSkge1xyXG4gICAgICAgIGlmIChhZGRyZXNzT2JqLnR5cGVzW2pdID09PSAnY291bnRyeScpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGFkZHJlc3NPYmoudHlwZXNbal0pOyAvLyBjb25maXJtIHRoYXQgdGhpcyBpcyAnY291bnRyeSdcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGFkZHJlc3NPYmoubG9uZ19uYW1lKTsgLy8gY29uZmlybSB0aGF0IHRoaXMgaXMgdGhlIGNvdW50cnkgbmFtZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5pbml0UGFnZUJ5SGFzaCgpOyJdfQ==
},{"./model/Person":2}],2:[function(require,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var Person = (function () {
    function Person(firstName, lastName) {
        _classCallCheck(this, Person);

        this.firstName = firstName;
        this.lastName = lastName;
    }

    _createClass(Person, {
        fullName: {
            get: function () {
                return "" + this.firstName + " " + this.lastName;
            }
        }
    });

    return Person;
})();

exports.Person = Person;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
